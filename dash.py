import streamlit as st
import pandas as pd
import plotly.express as px
import json
import re
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(layout="wide", page_title="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –æ –ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫–µ")

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –æ –ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫–µ")

# –°–∞–π–¥–±–∞—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON
st.sidebar.header("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
uploaded_json = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON —Å –æ—Ç–∑—ã–≤–∞–º–∏", type=['json'])

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
SENTIMENT_LEXICON = {
    'positive': {'–æ—Ç–ª–∏—á–Ω': 2, '—Ö–æ—Ä–æ—à': 2, '–ø—Ä–µ–∫—Ä–∞—Å–Ω': 2, '–±—ã—Å—Ç—Ä': 1, '—É–¥–æ–±–Ω': 1, '–ø–æ–Ω—è—Ç–Ω': 1, '—Ä–µ–∫–æ–º–µ–Ω–¥': 2, '–¥–æ–≤–æ–ª': 2, '—Å–ø–∞—Å–∏–±': 2, '—Ä–∞–¥': 2},
    'negative': {'–ø–ª–æ—Ö': -2, '—É–∂–∞—Å–Ω': -3, '–º–µ–¥–ª–µ–Ω': -2, '–Ω–µ—É–¥–æ–±–Ω': -2, '—Å–ª–æ–∂–Ω': -2, '–ø—Ä–æ–±–ª–µ–º': -2},
    'neutral': {'–Ω–æ—Ä–º–∞–ª—å–Ω': 0, '–æ–±—ã—á–Ω': 0, '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω': 0}
}

INTENSIFIERS = {'–æ—á–µ–Ω—å': 1.5, '–∫—Ä–∞–π–Ω–µ': 2}
NEGATION_WORDS = {'–Ω–µ', '–Ω–µ—Ç'}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ç–µ–º
PRODUCT_CATEGORIES_TOPICS = {
    '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ': {'keywords': ['–æ–±—Å–ª—É–∂–∏–≤–∞–Ω', '–æ—Ç–¥–µ–ª–µ–Ω–∏', '–∫–ª–∏–µ–Ω—Ç', '–ø–µ—Ä—Å–æ–Ω–∞–ª'], 'phrases': ['–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≤ –±–∞–Ω–∫–µ']},
    '–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ': {'keywords': ['–º–æ–±–∏–ª—å', '–ø—Ä–∏–ª–æ–∂–µ–Ω', '–æ–Ω–ª–∞–π–Ω', '–∑–∞–≤–∏—Å–∞'], 'phrases': ['–º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ']},
    '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞': {'keywords': ['–∫—Ä–µ–¥–∏—Ç–Ω', '–ª–∏–º–∏—Ç', '–æ–¥–æ–±—Ä–µ–Ω'], 'phrases': ['–∫—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞']}
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
PRODUCT_CATEGORIES_MAIN = {
    '–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã –∏ –ø–ª–∞—Ç–µ–∂–∏': {'keywords': ['–º–æ–±–∏–ª—å', '–ø–µ—Ä–µ–≤–æ–¥', '—Å—á–µ—Ç'], 'phrases': ['–º–æ–±–∏–ª—å–Ω—ã–π –±–∞–Ω–∫']},
    '–ö—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏–µ': {'keywords': ['–∫—Ä–µ–¥–∏—Ç', '–ª–∏–º–∏—Ç'], 'phrases': ['–∫—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞']},
    '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏': {'keywords': ['–∏–Ω–≤–µ—Å—Ç–∏—Ü', '–∞–∫—Ü–∏'], 'phrases': ['–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å']},
    '–°–±–µ—Ä–µ–∂–µ–Ω–∏—è –∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è': {'keywords': ['–≤–∫–ª–∞–¥', '—Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω'], 'phrases': ['—Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç']},
    '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∏ –∑–∞—â–∏—Ç–∞': {'keywords': ['—Å—Ç—Ä–∞—Ö–æ–≤–∫'], 'phrases': ['—Å—Ç—Ä–∞—Ö–æ–≤–æ–π –ø–æ–ª–∏—Å']},
    '–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏': {'keywords': ['–ø—Ä–µ–º–∏—É–º', 'VIP'], 'phrases': ['–ø—Ä–µ–º–∏–∞–ª—å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ']}
}

# –§—É–Ω–∫—Ü–∏–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
def classify_sentiment(text):
    text = text.lower()
    sentiment_score = 0
    words = re.findall(r'\w+', text)
    for i, word in enumerate(words):
        base_score = 0
        for sentiment, keywords in SENTIMENT_LEXICON.items():
            for key, score in keywords.items():
                if key in word:
                    base_score = score
                    break
            if base_score != 0:
                break
        if base_score != 0:
            if i > 0 and words[i-1] in INTENSIFIERS:
                base_score *= INTENSIFIERS[words[i-1]]
            if i > 0 and words[i-1] in NEGATION_WORDS:
                base_score = -base_score
            sentiment_score += base_score
    return 'positive' if sentiment_score > 1 else 'negative' if sentiment_score < -1 else 'neutral'

def classify_topics(text):
    text = text.lower()
    categories = set()
    words = set(re.findall(r'\w+', text))
    for category, data in PRODUCT_CATEGORIES_TOPICS.items():
        keywords = set(data['keywords'])
        phrases = set(data['phrases'])
        if any(word in keywords for word in words) or any(phrase in text for phrase in phrases):
            categories.add(category)
    return list(categories) if categories else ['–î—Ä—É–≥–æ–µ']

def classify_product_category(text, topics):
    text = text.lower()
    categories = set()
    words = set(re.findall(r'\w+', text))
    for category, data in PRODUCT_CATEGORIES_MAIN.items():
        keywords = set(data['keywords'])
        phrases = set(data['phrases'])
        if any(word in keywords for word in words) or any(phrase in text for phrase in phrases):
            categories.add(category)
    if len(categories) > 1 and '–î—Ä—É–≥–æ–µ' in categories:
        categories.remove('–î—Ä—É–≥–æ–µ')
    return list(categories) if categories else ['–î—Ä—É–≥–æ–µ']

def process_review(review):
    text = review.get('text', '')
    id = review.get('id', 0)
    parts = re.split(r'\b–Ω–æ\b', text, flags=re.IGNORECASE)
    parts = [p.strip() for p in parts if p.strip()]
    
    topics = []
    sentiments = []
    if parts:
        for part in parts:
            part_topics = classify_topics(part)
            sentiment = classify_sentiment(part)
            for topic in part_topics:
                if topic not in topics:
                    topics.append(topic)
                    sentiments.append(sentiment)
    else:
        topics = classify_topics(text)
        sentiment = classify_sentiment(text)
        sentiments = [sentiment] * len(topics)
    
    if len(topics) > 1 and '–î—Ä—É–≥–æ–µ' in topics:
        idx = topics.index('–î—Ä—É–≥–æ–µ')
        topics.pop(idx)
        sentiments.pop(idx)
    
    return {
        'id': id,
        'text': text,
        'topics': ', '.join(topics),
        'sentiments': ', '.join(sentiments),
        'product_category': ', '.join(classify_product_category(text, topics)),
        'date': datetime.now().strftime('%d.%m.%Y'),
        'rating': 3,  # –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        'author': review.get('author', '–ö–ª–∏–µ–Ω—Ç –±–∞–Ω–∫–∞'),
        'source': 'gold'
    }

@st.cache_data
def load_data(uploaded_file):
    if uploaded_file is not None:
        data = json.load(uploaded_file)
        if 'data' in data and isinstance(data['data'], list):
            predictions = [process_review(review) for review in data['data']]
            df = pd.DataFrame(predictions)
            if not df.empty:
                df['date'] = pd.to_datetime(df['date'], format='%d.%m.%Y')
                st.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –æ—Ç–∑—ã–≤–æ–≤")
                return df
        st.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON. –û–∂–∏–¥–∞–µ—Ç—Å—è {'data': [{'id': 1, 'text': '...'}]}")
    return pd.DataFrame()

if uploaded_json:
    df = load_data(uploaded_json)
else:
    df = pd.DataFrame()
    st.sidebar.warning("–ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON —Å –æ—Ç–∑—ã–≤–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

if not df.empty:
    # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–∑—ã–≤–æ–≤
    st.subheader("üìù –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç–∑—ã–≤—ã")
    st.dataframe(df)

    # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    st.subheader("üòä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
    if 'sentiments' in df:
        sentiment_counts = df['sentiments'].str.split(', ').explode().value_counts()
        fig_sentiment = px.pie(names=sentiment_counts.index, values=sentiment_counts.values, title="–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç–∑—ã–≤–æ–≤",
                              color=sentiment_counts.index,
                              color_discrete_map={'positive': '#90EE90', 'negative': '#FF6347', 'neutral': '#D3D3D3'})
        st.plotly_chart(fig_sentiment, use_container_width=True)
    else:
        st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.")

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    st.subheader("üìã –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    if 'product_category' in df:
        product_counts = df['product_category'].str.split(', ').explode().value_counts()
        fig_product = px.bar(x=product_counts.index, y=product_counts.values, title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
                             color=product_counts.index,
                             color_discrete_map={
                                 '–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã –∏ –ø–ª–∞—Ç–µ–∂–∏': '#1f77b4',
                                 '–ö—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏–µ': '#2ca02c',
                                 '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏': '#d62728',
                                 '–°–±–µ—Ä–µ–∂–µ–Ω–∏—è –∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è': '#ff7f0e',
                                 '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∏ –∑–∞—â–∏—Ç–∞': '#9467bd',
                                 '–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏': '#8c564b',
                                 '–î—Ä—É–≥–æ–µ': '#bcbd22'
                             })
        st.plotly_chart(fig_product, use_container_width=True)
    else:
        st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
else:
    st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON —Å –æ—Ç–∑—ã–≤–∞–º–∏.")
