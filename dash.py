import streamlit as st
import pandas as pd
import plotly.express as px
import json
import re
from datetime import datetime

# Настройки страницы
st.set_page_config(layout="wide", page_title="Аналитика отзывов о Газпромбанке")

# Заголовок
st.title("Аналитика отзывов о Газпромбанке")

# Сайдбар для загрузки JSON
st.sidebar.header("Загрузка данных")
uploaded_json = st.sidebar.file_uploader("Загрузите JSON с отзывами", type=['json'])

# Словарь для тональности с уточнёнными весами
SENTIMENT_LEXICON = {
    'positive': {
        'отличн': 2, 'хорош': 2, 'прекрасн': 2, 'быстр': 1, 'удобн': 1, 'понятн': 1,
        'рекоменд': 2, 'довол': 2, 'спасиб': 2, 'рад': 2, 'легк': 1, 'приятн': 1,
        'качествен': 2, 'профессионал': 2, 'оператив': 1, 'четк': 1, 'прозрачн': 1,
        'выгодн': 2, 'надежн': 2, 'лучш': 2, 'супер': 2, 'замечательн': 2, 'впечатл': 2,
        'удовлетворен': 2, 'понравилось': 2, 'нравится': 2, 'вовремя': 1, 'своевремен': 1,
        'гладко': 1, 'эффективн': 1, 'без проблем': 2, 'не плохо': 1, 'без ошибок': 2,
        'не медлен': 1, 'не зависает': 2
    },
    'negative': {
        'плох': -2, 'ужасн': -3, 'медлен': -2, 'неудобн': -2, 'сложн': -2, 'не нравится': -3,
        'проблем': -2, 'ошибк': -2, 'глюк': -2, 'зависа': -2, 'не работ': -3, 'отказ': -2,
        'обман': -3, 'дорог': -2, 'комисс': -1, 'долг': -2, 'неясн': -1, 'неполадк': -2,
        'недовол': -2, 'разочарован': -3, 'кошмар': -3, 'зависает': -2, 'виснет': -2, 'тупит': -2,
        'лагает': -2, 'маленьк': -1
    },
    'neutral': {
        'нормальн': 0, 'обычн': 0, 'стандартн': 0, 'приемлем': 0, 'изменен': 0,
        'ожида': 0, 'средн': 0, 'работ': 0, 'нейтральн': 0
    }
}

INTENSIFIERS = {
    'очень': 1.5, 'крайне': 2, 'совсем': 1.5, 'абсолютно': 2, 'полностью': 1.5, 'сильно': 1.5,
    'чрезвычайно': 2, 'невероятно': 2, 'удивительно': 1.5, 'необычно': 1.5, 'весьма': 1.5,
    'слишком': 2, 'часто': 1
}

NEGATION_WORDS = {
    'не', 'нет', 'ни', 'без', 'нельзя', 'невозможно', 'никак', 'ничуть'
}

# Словарь для тем (topics)
PRODUCT_CATEGORIES_TOPICS = {
    'Обслуживание': {
        'keywords': ['обслуживан', 'отделени', 'клиент', 'очеред', 'персонал', 'менеджер', 'консультант', 'прием', 'касса', 'оператор', 'обслуживание'],
        'phrases': ['обслуживание в банке', 'отделение банка', 'персональный менеджер', 'консультация в банке', 'очередь в отделении']
    },
    'Мобильное приложение': {
        'keywords': ['мобиль', 'приложен', 'онлайн', 'интернет', 'смс', 'глюк', 'зависа', 'не работ', 'тормоз', 'виснет', 'тупит', 'лагает'],
        'phrases': ['мобильный банк', 'мобильное приложение', 'интернет банк', 'смс информирование', 'приложение зависло']
    },
    'Кредитная карта': {
        'keywords': ['кредитн', 'лимит', 'одобрен', 'погашен', 'процент', 'платеж', 'заявк'],
        'phrases': ['кредитная карта', 'одобрение кредита', 'погашение кредита', 'кредитный лимит', 'оформить карту']
    }
}

# Словарь для классификации продуктов
PRODUCT_CATEGORIES_MAIN = {
    'Повседневные финансы и платежи': {
        'subcategories': {
            'Ведение валютных счетов': {'keywords': ['валют', 'рубл', 'доллар', 'евро', 'валютн', 'счет', 'конвертац', 'обмен'], 'phrases': ['валютный счет', 'обмен валюты', 'конвертация валюты']},
            'Дебетовые карты': {'keywords': ['дебет', 'снятие', 'обслуживание', 'кэшбэк'], 'phrases': ['дебетовая карта', 'обслуживание карты', 'снятие наличных']},
            'Мобильный банк': {'keywords': ['мобиль', 'приложен', 'онлайн', 'интернет', 'смс'], 'phrases': ['мобильный банк', 'мобильное приложение', 'интернет банк']},
            'Переводы': {'keywords': ['перевод', 'средств', 'деньг', 'перечисление'], 'phrases': ['перевод денег', 'перечисление средств']},
            'Зарплатные карты': {'keywords': ['зарплат', 'зарплатн', 'выплата'], 'phrases': ['зарплатная карта', 'выплата зарплаты']}
        },
        'keywords': ['перевод', 'зарплат', 'мобиль', 'банк', 'платеж', 'валют', 'рубл', 'доллар', 'евро', 'снят', 'получен', 'банкомат', 'оплат', 'квитанц', 'комисс', 'обслужван', 'отделени', 'клиент', 'очеред', 'онлайн', 'приложен', 'интернет', 'смс', 'уведомлен', 'средств', 'деньг', 'налич', 'безнал', 'сберкнижк', 'выпис', 'баланс', 'остаток'],
        'phrases': ['зарплатная карта', 'мобильный банк', 'перевод денег', 'открыть счет', 'валютный счет', 'банковский счет', 'расчетный счет', 'снять деньги', 'получить деньги', 'оплатить услуги', 'комиссия за перевод', 'обслуживание карты', 'отделение банка', 'очередь в банке', 'интернет банк', 'мобильное приложение', 'смс информирование', 'безналичный расчет', 'выписка по счету', 'остаток на счете']
    },
    'Сбережения и накопления': {
        'keywords': ['вклад', 'сберегательн', 'накопит', 'сбережен', 'металл', 'счет', 'срочн', 'процент', 'накоп', 'сберег', 'депозит', 'ставк', 'доходност', 'капитализац', 'пополнен', 'снят', 'пролонгац', 'проценты', 'начислен', 'забрат', 'получен', 'золот', 'серебр', 'платин', 'паллад', 'слитк', 'сберегательн', 'сертификат', 'накоплен', 'открыт', 'закрыт'],
        'phrases': ['срочный вклад', 'сберегательный счет', 'металлический счет', 'открыть вклад', 'накопительный счет', 'обезличенный металлический', 'банковский вклад', 'депозитный счет', 'процентная ставка', 'доход по вкладу', 'капитализация процентов', 'пополнить вклад', 'снять со вклада', 'пролонгация вклада', 'начисление процентов', 'забрать вклад', 'открыть депозит', 'золотой слиток', 'сберегательный сертификат', 'накопить деньги']
    },
    'Кредитование': {
        'keywords': ['кредит', 'ипотек', 'автокредит', 'рефинансирован', 'заем', 'платеж', 'процент', 'ставк', 'одобрен', 'погашен', 'взят', 'оформлен', 'долг', 'задолженност', 'просрочк', 'штраф', 'пени', 'реструктуризац', 'решен', 'отказ', 'услов', 'требован', 'справк', 'заявк', 'анкет', 'кредитн', 'истори', 'скоринг', 'лимит', 'льготн', 'период', 'график', 'платеж'],
        'phrases': ['потребительский кредит', 'ипотечный кредит', 'взять кредит', 'оформить кредит', 'кредитная карта', 'рефинансирование кредита', 'автомобильный кредит', 'одобрение кредита', 'погашение кредита', 'кредитная история', 'процентная ставка', 'ежемесячный платеж', 'льготный период', 'график платежей', 'просрочка платежа', 'штрафные санкции', 'реструктуризация долга', 'отказ в кредите', 'кредитная заявка', 'справка о доходах', 'кредитный лимит']
    },
    'Премиальные услуги': {
        'keywords': ['приват', 'премиум', 'депозитар', 'ячейк', 'консультирован', 'планирован', 'персонал', 'менеджер', 'эксклюзив', 'вип', 'персональн', 'обслужван', 'услуг', 'богат', 'состоян', 'капитал', 'наслед', 'сохран', 'приумножен', 'управлен', 'актив', 'ценност', 'драгоценност', 'хранен', 'привилеги', 'элитн', 'специальн', 'индивидуальн', 'конфиденц', 'преференц', 'сервис', 'комнат', 'зал', 'зона', 'приемн', 'оформлен', 'доступ', 'уникальн'],
        'phrases': ['приват-банкинг', 'премиум-обслуживание', 'депозитарные услуги', 'сейфовая ячейка', 'персональный менеджер', 'эксклюзивное обслуживание', 'VIP-услуги', 'индивидуальный подход', 'управление капиталом', 'наследование капитала', 'сохранение активов', 'приумножение средств', 'хранение ценностей', 'премиальный сервис', 'конфиденциальное обслуживание', 'элитный зал', 'привилегированный доступ', 'уникальные предложения', 'персональный консультант', 'оформление премиум-услуг']
    },
    'Инвестиции': {
        'keywords': ['инвест', 'брокер', 'иис', 'пиф', 'акци', 'облигац', 'бирж', 'портфель', 'доходност', 'структурн', 'пай', 'фонд', 'ценн', 'бумаг', 'торгов', 'сделк', 'купля', 'продаж', 'котировк', 'дивиденд', 'купон', 'выплат', 'риск', 'прибыл', 'убыток', 'анализ', 'совет', 'управлен', 'инвестор', 'трейдер', 'лиценз', 'комисс', 'тариф'],
        'phrases': ['брокерский счет', 'инвестиционный счет', 'паевой фонд', 'структурный продукт', 'купить акции', 'инвестировать деньги', 'индивидуальный инвестиционный счет', 'ценные бумаги', 'торговля на бирже', 'инвестиционный портфель', 'доходность инвестиций', 'покупка акций', 'продажа облигаций', 'дивидендные выплаты', 'купонный доход', 'управление портфелем', 'инвестиционный риск', 'биржевые торги', 'лицензия брокера', 'тарифы на обслуживание', 'инвестиционная стратегия', 'финансовый советник']
    }
}

# Функции классификации
def classify_sentiment(text):
    text = text.lower()
    sentiment_score = 0
    words = re.findall(r'\w+', text)
    for i, word in enumerate(words):
        base_score = 0
        for sentiment, keywords in SENTIMENT_LEXICON.items():
            for key, score in keywords.items():
                if key in word:
                    base_score = score
                    break
            if base_score != 0:
                break
        if base_score != 0:
            if i > 0 and words[i-1] in INTENSIFIERS:
                base_score *= INTENSIFIERS[words[i-1]]
            if i > 0 and words[i-1] in NEGATION_WORDS:
                base_score = -base_score
            sentiment_score += base_score
    return 'положительно' if sentiment_score > 1 else 'отрицательно' if sentiment_score < -1 else 'нейтрально'

def classify_topics(text):
    text = text.lower()
    categories = set()
    words = set(re.findall(r'\w+', text))
    for category, data in PRODUCT_CATEGORIES_TOPICS.items():
        keywords = set(data['keywords'])
        phrases = set(data['phrases'])
        if any(word in keywords for word in words) or any(phrase in text for phrase in phrases):
            categories.add(category)
    return list(categories) if categories else ['Другое']

def classify_product_category(text, topics):
    text = text.lower()
    categories = set()
    words = set(re.findall(r'\w+', text))
    for category, data in PRODUCT_CATEGORIES_MAIN.items():
        keywords = set(data['keywords'])
        phrases = set(data['phrases'])
        if any(word in keywords for word in words) or any(phrase in text for phrase in phrases):
            categories.add(category)
    if len(categories) > 1 and 'Другое' in categories:
        categories.remove('Другое')
    return list(categories) if categories else ['Другое']

def process_review(review):
    text = review.get('text', '')
    id = review.get('id', 0)
    parts = re.split(r'\bно\b', text, flags=re.IGNORECASE)
    parts = [p.strip() for p in parts if p.strip()]
    
    topics = []
    sentiments = []
    if parts:
        for part in parts:
            part_topics = classify_topics(part)
            sentiment = classify_sentiment(part)
            for topic in part_topics:
                if topic not in topics:
                    topics.append(topic)
                    sentiments.append(sentiment)
    else:
        topics = classify_topics(text)
        sentiment = classify_sentiment(text)
        sentiments = [sentiment] * len(topics)
    
    if len(topics) > 1 and 'Другое' in topics:
        idx = topics.index('Другое')
        topics.pop(idx)
        sentiments.pop(idx)
    
    return {
        'id': id,
        'text': text,
        'topics': ', '.join(topics),
        'sentiments': ', '.join(sentiments),
        'product_category': ', '.join(classify_product_category(text, topics)),
        'date': datetime.now().strftime('%d.%m.%Y'),
        'rating': 3,  # Средний рейтинг по умолчанию
        'author': review.get('author', 'Клиент банка'),
        'source': 'gold'
    }

@st.cache_data
def load_data(uploaded_file):
    if uploaded_file is not None:
        data = json.load(uploaded_file)
        if 'data' in data and isinstance(data['data'], list):
            predictions = [process_review(review) for review in data['data']]
            df = pd.DataFrame(predictions)
            if not df.empty:
                df['date'] = pd.to_datetime(df['date'], format='%d.%m.%Y')
                st.info(f"Загружено {len(df)} отзывов")
                return df
        st.error("Неверный формат JSON. Ожидается {'data': [{'id': 1, 'text': '...'}]}")
    return pd.DataFrame()

if uploaded_json:
    df = load_data(uploaded_json)
else:
    df = pd.DataFrame()
    st.sidebar.warning("Загрузите JSON с отзывами для анализа")

if not df.empty:
    # Таблица отзывов
    st.subheader("📝 Подробные отзывы")
    st.dataframe(df)

    # График распределения тональности
    st.subheader("😊 Распределение тональности")
    if 'sentiments' in df:
        sentiment_counts = df['sentiments'].str.split(', ').explode().value_counts()
        fig_sentiment = px.pie(names=sentiment_counts.index, values=sentiment_counts.values, title="Тональность отзывов",
                              color=sentiment_counts.index,
                              color_discrete_map={'положительно': '#90EE90', 'отрицательно': '#FF6347', 'нейтрально': '#D3D3D3'})
        st.plotly_chart(fig_sentiment, use_container_width=True)
    else:
        st.write("Нет данных для отображения тональности.")

    # Распределение по категориям продуктов
    st.subheader("📋 Распределение по категориям продуктов")
    if 'product_category' in df:
        product_counts = df['product_category'].str.split(', ').explode().value_counts()
        fig_product = px.bar(x=product_counts.index, y=product_counts.values, title="Категории продуктов",
                             color=product_counts.index,
                             color_discrete_map={
                                 'Повседневные финансы и платежи': '#1f77b4',
                                 'Сбережения и накопления': '#ff7f0e',
                                 'Кредитование': '#2ca02c',
                                 'Премиальные услуги': '#9467bd',
                                 'Инвестиции': '#d62728',
                                 'Другое': '#bcbd22'
                             })
        st.plotly_chart(fig_product, use_container_width=True)
    else:
        st.write("Нет данных для отображения категорий.")
else:
    st.write("Нет данных для анализа. Загрузите JSON с отзывами.")
