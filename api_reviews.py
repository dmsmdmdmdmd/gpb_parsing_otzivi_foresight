import pandas as pd
import requests
from datetime import datetime
import re
import json
import os

# Диапазон дат из ТЗ
START_DATE = datetime.strptime('01.01.2024', '%d.%m.%Y')
END_DATE = datetime.strptime('31.05.2025', '%d.%m.%Y')

# API URL и параметры
API_BASE = "https://www.sravni.ru/proxy-reviews/reviews"
PARAMS = {
    'FilterBy': 'withRates',
    'NewIds': 'true',
    'OrderBy': 'byDate',
    'PageSize': 100,  # Увеличим для ускорения (максимум 100 по API)
    'ReviewObjectId': '5bb4f768245bc22a520a6115',
    'ReviewObjectType': 'banks',
    'Tag': '',
    'WithVotes': 'true',
    'fingerPrint': '-1'
}

# Словарь для тональности
SENTIMENT_LEXICON = {
    'positive': {
        'отличн', 'хорош', 'прекрасн', 'быстр', 'удобн', 'понятн', 
        'рекоменд', 'довол', 'спасиб', 'рад', 'легк', 'приятн', 
        'качествен', 'профессионал', 'оператив', 'четк', 'прозрачн', 
        'выгодн', 'надежн', 'лучш', 'супер', 'замечательн', 'впечатл', 
        'удовлетворительн', 'крут', 'великолепн', 'превосходн',
        'восхитительн', 'беспроблемн', 'комфортн', 'нравится', 'понравилось',
        'классн', 'классическ', 'замachatел', 'отменн', 'идеальн', 'замечательн',
        'похвал', 'благодар', 'суперски', 'отличный', 'замечательный', 'прекрасный',
        'быстрый', 'удобный', 'понятный', 'рекомендую', 'доволен', 'спасибо', 'рад',
        'легкий', 'приятный', 'качественный', 'профессиональный', 'оперативный',
        'четкий', 'прозрачный', 'выгодный', 'надежный', 'лучший', 'супер', 'замечательный',
        'впечатляющий', 'удовлетворительный', 'крутой', 'великолепный', 'превосходный',
        'восхитительный', 'беспроблемный', 'комфортный', 'нравится', 'понравилось'
    },
    'negative': {
        'плох', 'ужасн', 'медлен', 'неудобн', 'сложн', 'не нравится', 
        'проблем', 'ошибк', 'глюк', 'зависа', 'не работ', 'отказ', 
        'обман', 'дорог', 'комисс', 'долг', 'неясн', 'неполадк', 
        'недовол', 'разочарован', 'кошмар', 'уход', 'пропа', 'сбо', 
        'некачествен', 'отвратительн', 'раздража', 'бесит', 'невозможн', 
        'неприемлем', 'ужас', 'глюч', 'тормоз', 'затормож', 'неприятн',
        'ужасный', 'плохой', 'медленный', 'неудобный', 'сложный', 'не нравится',
        'проблема', 'ошибка', 'глюк', 'зависает', 'не работает', 'отказали',
        'обманули', 'дорого', 'комиссия', 'долг', 'неясно', 'неполадка',
        'недоволен', 'разочарован', 'кошмар', 'уходи', 'пропал', 'сбой',
        'некачественный', 'отвратительный', 'раздражает', 'бесит', 'невозможно',
        'неприемлемо', 'ужас', 'глючный', 'тормозит', 'заторможенный', 'неприятный',
        'жалоб', 'провал', 'худш', 'неудовлетвор', 'скандал', 'потер'
    },
    'neutral': {
        'нормальн', 'обычн', 'стандартн', 'приемлем', 'изменен', 
        'ожида', 'средн', 'работ', 'использ', 'имеет', 'предостав', 
        'получает', 'нейтральн', 'стандарт',
        'нормальный', 'обычный', 'стандартный', 'приемлемый', 'измененный',
        'ожидаемый', 'средний', 'работает', 'использует', 'имеет', 'предоставляет',
        'получает', 'нейтральный', 'стандарт', 'информ', 'процедур', 
        'услуг', 'ситуац', 'данн', 'процесс', 'оценк', 'провер',
        'нормально', 'обычно', 'стандартно', 'приемлемо', 'изменено',
        'ожидаемо', 'средне', 'работа', 'использование', 'имеется', 'предоставление',
        'получение', 'нейтрально', 'стандартный'
    }
}

INTENSIFIERS = {
    'очень', 'крайне', 'совсем', 'абсолютно', 'полностью', 'сильно', 
    'чрезвычайно', 'невероятно', 'удивительно', 'необычно', 'весьма', 'слишком'
}

NEGATION_WORDS = {
    'не', 'нет', 'ни', 'без', 'нельзя', 'невозможно', 'никак', 'ничуть'
}

# Словарь для категорий продуктов
PRODUCT_CATEGORIES = {
    'Повседневные финансы и платежи': {
        'subcategories': {
            'Ведение валютных счетов': {'keywords': ['валют', 'рубл', 'доллар', 'евро', 'валютн', 'счет', 'конвертац', 'обмен'], 'phrases': ['валютный счет', 'обмен валюты', 'конвертация валюты']},
            'Дебетовые карты': {'keywords': ['дебет', 'карт', 'снятие', 'обслуживание', 'кэшбэк'], 'phrases': ['дебетовая карта', 'обслуживание карты', 'снятие наличных']},
            'Мобильный банк': {'keywords': ['мобиль', 'приложен', 'онлайн', 'интернет', 'смс'], 'phrases': ['мобильный банк', 'мобильное приложение', 'интернет банк']},
            'Переводы': {'keywords': ['перевод', 'средств', 'деньг', 'перечисление'], 'phrases': ['перевод денег', 'перечисление средств']},
            'Зарплатные карты': {'keywords': ['зарплат', 'зарплатн', 'выплата'], 'phrases': ['зарплатная карта', 'выплата зарплаты']}
        },
        'keywords': ['дебет', 'карт', 'счет', 'перевод', 'зарплат', 'мобиль', 'банк', 'платеж', 'валют', 'рубл', 'доллар', 'евро', 'снят', 'получен', 'банкомат', 'оплат', 'квитанц', 'комисс', 'обслужван', 'отделени', 'клиент', 'очеред', 'онлайн', 'приложен', 'интернет', 'смс', 'уведомлен', 'средств', 'деньг', 'налич', 'безнал', 'сберкнижк', 'выпис', 'баланс', 'остаток'],
        'phrases': ['дебетовая карта', 'зарплатная карта', 'мобильный банк', 'перевод денег', 'открыть счет', 'валютный счет', 'банковский счет', 'расчетный счет', 'снять деньги', 'получить деньги', 'оплатить услуги', 'комиссия за перевод', 'обслуживание карты', 'отделение банка', 'очередь в банке', 'интернет банк', 'мобильное приложение', 'смс информирование', 'безналичный расчет', 'выписка по счету', 'остаток на счете']
    },
    'Сбережения и накопления': {
        'keywords': ['вклад', 'сберегательн', 'накопит', 'сбережен', 'металл', 'счет', 'срочн', 'процент', 'накоп', 'сберег', 'депозит', 'ставк', 'доходност', 'капитализац', 'пополнен', 'снят', 'пролонгац', 'проценты', 'начислен', 'забрат', 'получен', 'золот', 'серебр', 'платин', 'паллад', 'слитк', 'сберегательн', 'сертификат', 'накоплен', 'открыт', 'закрыт'],
        'phrases': ['срочный вклад', 'сберегательный счет', 'металлический счет', 'открыть вклад', 'накопительный счет', 'обезличенный металлический', 'банковский вклад', 'депозитный счет', 'процентная ставка', 'доход по вкладу', 'капитализация процентов', 'пополнить вклад', 'снять со вклада', 'пролонгация вклада', 'начисление процентов', 'забрать вклад', 'открыть депозит', 'золотой слиток', 'сберегательный сертификат', 'накопить деньги']
    },
    'Кредитование': {
        'keywords': ['кредит', 'ипотек', 'автокредит', 'рефинансирован', 'заем', 'платеж', 'процент', 'ставк', 'одобрен', 'погашен', 'взят', 'оформлен', 'долг', 'задолженност', 'просрочк', 'штраф', 'пени', 'реструктуризац', 'решен', 'отказ', 'услов', 'требован', 'справк', 'заявk', 'анкет', 'кредитн', 'истори', 'скоринг', 'лимит', 'льготн', 'период', 'график', 'платеж'],
        'phrases': ['потребительский кредит', 'ипотечный кредит', 'взять кредит', 'оформить кредит', 'кредитная карта', 'рефинансирование кредита', 'автомобильный кредит', 'одобрение кредита', 'погашение кредита', 'кредитная история', 'процентная ставка', 'ежемесячный платеж', 'льготный период', 'график платежей', 'просрочка платежа', 'штрафные санкции', 'реструктуризация долга', 'отказ в кредите', 'кредитная заявка', 'справка о доходах', 'кредитный лимит']
    },
    'Инвестиции': {
        'keywords': ['инвест', 'брокер', 'иис', 'пиф', 'акци', 'облигац', 'бирж', 'портфель', 'доходност', 'структурн', 'пай', 'фонд', 'ценн', 'бумаг', 'торгов', 'сделk', 'купля', 'продаж', 'котировk', 'дивиденд', 'купон', 'выплат', 'риск', 'прибыл', 'убыток', 'анализ', 'совет', 'управлен', 'инвестор', 'трейдер', 'лиценз', 'комисс', 'тариф'],
        'phrases': ['брокерский счет', 'инвестиционный счет', 'паевой фонд', 'структурный продукт', 'купить акции', 'инвестировать деньги', 'индивидуальный инвестиционный счет', 'ценные бумаги', 'торговля на бирже', 'инвестиционный портфель', 'доходность инвестиций', 'покупка акций', 'продажа облигаций', 'дивидендные выплаты', 'купонный доход', 'управление портфелем', 'инвестиционный риск', 'биржевые торги', 'лицензия брокера', 'тарифы на обслуживание', 'инвестиционная стратегия', 'финансовый советник']
    },
    'Страхование и защита': {
        'keywords': ['страхов', 'защит', 'путешеств', 'имуществ', 'несчастn', 'случа', 'болезn', 'риск', 'полис', 'страховk', 'выплат', 'компенсац', 'дтп', 'авария', 'здоров', 'жизn', 'недвиж', 'квартир', 'дом', 'машин', 'авто', 'лечен', 'больничn', 'госпитализац', 'оплат', 'лекарств', 'ущерб', 'повреждen', 'краж', 'пожар', 'затопlen', 'ответственност', 'гражданск'],
        'phrases': ['страхование путешественников', 'страхование имущества', 'страховой полис', 'страхование от несчастных случаев', 'страхование здоровья', 'страхование жизни', 'страхование квартиры', 'страхование автомобиля', 'страховой случай', 'страховая выплата', 'компенсация ущерба', 'добровольное страхование', 'обязательное страхование', 'страхование ответственности', 'страхование ипотеки', 'медицинская страховка', 'страхование выезжающих за рубеж', 'страховое возмещение', 'оформить страховку', 'отказали в выплате', 'страховая компания']
    },
    'Премиальные услуги': {
        'keywords': ['приват', 'премиум', 'депозитар', 'ячейk', 'консультирован', 'планирован', 'персонал', 'менеджер', 'эксклюзив', 'вип', 'персональn', 'обслужван', 'услуг', 'богат', 'состоян', 'капитал', 'наслед', 'сохран', 'приумножen', 'управlen', 'актив', 'ценност', 'драгоценност', 'хранen', 'привилеги', 'элитn', 'специальn', 'индивидуальn', 'конфиденц', 'преференц', 'сервис', 'комнат', 'зал', 'зона', 'приемn', 'оформlen', 'доступ', 'уникальn'],
        'phrases': ['приват-банкинг', 'премиум-обслуживание', 'депозитарные услуги', 'сейфовая ячейка', 'персональный менеджер', 'эксклюзивное обслуживание', 'VIP-услуги', 'индивидуальный подход', 'управление капиталом', 'наследование капитала', 'сохранение активов', 'приумножение средств', 'хранение ценностей', 'премиальный сервис', 'конфиденциальное обслуживание', 'элитный зал', 'привилегированный доступ', 'уникальные предложения', 'персональный консультант', 'оформление премиум-услуг']
    }
}

def classify_sentiment(text):
    text = text.lower()
    sentiment_score = 0
    words = set(re.findall(r'\w+', text))
    
    for word in words:
        if any(neg in word for neg in NEGATION_WORDS):
            continue
        if any(intens in word for intens in INTENSIFIERS):
            sentiment_score *= 1.5
        if any(word in lexicon for lexicon in SENTIMENT_LEXICON['positive']):
            sentiment_score += 1
        if any(word in lexicon for lexicon in SENTIMENT_LEXICON['negative']):
            sentiment_score -= 1
    
    if sentiment_score > 0:
        return 'positive'
    elif sentiment_score < 0:
        return 'negative'
    else:
        return 'neutral'

def classify_product(text):
    text = text.lower()
    for category, data in PRODUCT_CATEGORIES.items():
        keywords = set(data['keywords'])
        phrases = set(data['phrases'])
        words = set(re.findall(r'\w+', text))
        if any(word in keywords for word in words) or any(phrase in text for phrase in phrases):
            # Проверка подпунктов для "Повседневные финансы и платежи"
            if category == 'Повседневные финансы и платежи' and 'subcategories' in data:
                for subcategory, subdata in data['subcategories'].items():
                    sub_keywords = set(subdata['keywords'])
                    sub_phrases = set(subdata['phrases'])
                    if any(word in sub_keywords for word in words) or any(phrase in text for phrase in sub_phrases):
                        return f"{category} - {subcategory}"
            return category
    return 'Другое'

def fetch_reviews():
    all_reviews = []
    page_index = 1
    total_pages = 21  # 2095 / 100 = 21 (округление вверх)

    # Проверяем существующий CSV для max 'id'
    csv_file = 'gazprombank_reviews_classified.csv'
    if os.path.exists(csv_file):
        existing_df = pd.read_csv(csv_file, sep=';', encoding='utf-8-sig')
        max_id = existing_df['id'].max() if 'id' in existing_df.columns and not existing_df.empty else 0
    else:
        max_id = 0
        existing_df = pd.DataFrame()

    review_id = max_id + 10000  # Начинаем с 10000 для sravni.ru, чтобы избежать пересечения с gold (1+)

    while page_index <= total_pages:
        params = PARAMS.copy()
        params['PageIndex'] = page_index
        response = requests.get(API_BASE, params=params, timeout=10)
        if response.status_code != 200:
            print(f"Ошибка при запросе страницы {page_index}: {response.status_code}")
            break
        
        data = response.json()
        reviews = data.get('items', [])
        if not reviews:
            break
        
        for review in reviews:
            review_date = datetime.strptime(review['date'][:10], '%Y-%m-%d')  # Преобразование даты из API
            if START_DATE <= review_date <= END_DATE:  # Фильтрация по датам
                review_date_str = review_date.strftime('%d.%m.%Y')  # Форматирование для сохранения
                text = review['text']
                sentiment = classify_sentiment(text)
                product = classify_product(text)
                all_reviews.append({
                    'date': review_date_str,
                    'author': f"{review.get('authorName', 'No author')} {review.get('authorLastName', '')}".strip(),
                    'title': review.get('title', 'No title'),
                    'text': text,
                    'rating': review.get('rating', 'Unknown'),
                    'source': 'sravni.ru',
                    'sentiment': sentiment,
                    'product_category': product,
                    'id': review_id,  # Уникальный 'id' для sravni.ru начиная с 10000
                    'topics': '',  # Пусто, если не используется
                    'sentiments': ''  # Пусто, если не используется
                })
                review_id += 1  # Инкремент 'id' для следующего
        
        page_index += 1
        print(f"Обработана страница {page_index-1} из {total_pages}")

    new_df = pd.DataFrame(all_reviews)
    if not new_df.empty:
        # Объединяем с существующим CSV (append)
        combined_df = pd.concat([existing_df, new_df], ignore_index=False)
        combined_df.to_csv(csv_file, sep=';', index=False, encoding='utf-8-sig')
        print(f"Собрано {len(new_df)} новых отзывов. Итоговый файл сохранен в {csv_file} с уникальными 'id'")
    else:
        print("Не удалось собрать новые отзывы.")

def main():
    fetch_reviews()

if __name__ == "__main__":
    main()
